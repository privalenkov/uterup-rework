// src/server/api.js
const express = require('express');
const { DailyMapManager } = require('./dailyMap');
const { generateMap } = require('./map');

function toDateString(date = new Date()) {
  const y = date.getFullYear();
  const m = String(date.getMonth() + 1).padStart(2, '0');
  const d = String(date.getDate()).padStart(2, '0');
  return `${y}-${m}-${d}`;
}

function createApiRouter({ dailyMapManager, onMapPublished } = {}) {
  if (!dailyMapManager) dailyMapManager = new DailyMapManager();

  const router = express.Router();

  // GET /api/daily
  router.get('/daily', (req, res) => {
    try {
      const dailyMap = dailyMapManager.getDailyMap();
      if (!dailyMap) {
        return res.status(404).json({
          error: 'No map available for today',
          message: '–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞',
        });
      }
      res.json({
        mapNumber: dailyMap.mapNumber,
        date: dailyMap.date,
        map: dailyMap.map,
        averageJumps: dailyMap.averageJumps,
        authorUsername: dailyMap.authorUsername,
      });
    } catch (e) {
      console.error('Error getting daily map:', e);
      res.status(500).json({ error: 'Internal server error', message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // POST /api/publish ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã (–∫–∞–∫ –±—ã–ª–æ)
  router.post('/publish', (req, res) => {
    try {
      const { password, date, map, authorUsername } = req.body || {};
      const adminPassword = process.env.ADMIN_PASSWORD || 'admin123';

      if (password !== adminPassword) {
        return res.status(403).json({ error: 'Forbidden', message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
      }
      if (!date || !map || !authorUsername) {
        return res.status(400).json({
          error: 'Bad request',
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª—è: date, map, authorUsername',
        });
      }

      const result = dailyMapManager.publishMap(date, map, authorUsername);
      try { onMapPublished && onMapPublished({ date, map }); } catch {}
      res.json({ success: true, message: '–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞', ...result });
    } catch (e) {
      console.error('Error publishing map:', e);
      res.status(500).json({ error: 'Internal server error', message: e.message });
    }
  });

  // üëá –ù–û–í–û–ï: POST /api/publish-today ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  router.post('/publish-today', (req, res) => {
    try {
      const { password, seed, authorUsername } = req.body || {};
      const adminPassword = process.env.ADMIN_PASSWORD || 'admin123';

      if (password !== adminPassword) {
        return res.status(403).json({ error: 'Forbidden', message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
      }

      const date = toDateString(new Date());
      const map = generateMap(seed); // –µ—Å–ª–∏ seed –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–æ–∑—å–º—ë—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª—É—á–∞–π–Ω—ã–π

      const result = dailyMapManager.publishMap(date, map, authorUsername || 'Admin');
      try { onMapPublished && onMapPublished({ date, map }); } catch {}
      res.json({
        success: true,
        message: result.isUpdate ? '–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–∑–¥–∞–Ω–∞',
        mapNumber: result.mapNumber,
        date: result.date,
        isUpdate: result.isUpdate,
      });
    } catch (e) {
      console.error('Error publish-today:', e);
      res.status(500).json({ error: 'Internal server error', message: e.message });
    }
  });

  return router;
}

module.exports = { createApiRouter };
