const fs = require('fs');
const path = require('path');

class DailyMapManager {
  constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—É—Ç–∏ –∏–ª–∏ fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const storagePath = process.env.MAPS_STORAGE_PATH || path.join(__dirname, '../../maps');
    this.mapsDir = storagePath;
    this.metaPath = path.join(this.mapsDir, 'meta.json');
    
    console.log(`üìÅ Maps storage path: ${this.mapsDir}`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(this.mapsDir)) {
      fs.mkdirSync(this.mapsDir, { recursive: true });
      console.log(`‚úÖ Created maps directory: ${this.mapsDir}`);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
    this.initMeta();
  }

  initMeta() {
    if (!fs.existsSync(this.metaPath)) {
      const meta = {
        firstMapDate: null,
        totalMaps: 0,
        maps: {}
      };
      fs.writeFileSync(this.metaPath, JSON.stringify(meta, null, 2));
    }
  }

  getMeta() {
    return JSON.parse(fs.readFileSync(this.metaPath, 'utf8'));
  }

  saveMeta(meta) {
    fs.writeFileSync(this.metaPath, JSON.stringify(meta, null, 2));
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
  getMoscowDateString(date = new Date()) {
    const moscowOffset = 3 * 60; // UTC+3 –≤ –º–∏–Ω—É—Ç–∞—Ö
    const localOffset = date.getTimezoneOffset();
    const moscowTime = new Date(date.getTime() + (moscowOffset + localOffset) * 60000);
    
    const year = moscowTime.getFullYear();
    const month = String(moscowTime.getMonth() + 1).padStart(2, '0');
    const day = String(moscowTime.getDate()).padStart(2, '0');
    
    return `${year}-${month}-${day}`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ –¥–∞—Ç–µ
  getMapNumber(targetDate) {
    const meta = this.getMeta();
    
    if (!meta.firstMapDate) {
      return null;
    }

    const firstDate = new Date(meta.firstMapDate + 'T00:00:00+03:00');
    const target = new Date(targetDate + 'T00:00:00+03:00');
    
    const daysDiff = Math.floor((target - firstDate) / (1000 * 60 * 60 * 24));
    
    if (daysDiff < 0) {
      return null;
    }

    return daysDiff + 1;
  }

  // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  publishMap(dateString, map, authorUsername) {
    const meta = this.getMeta();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if (!/^\d{4}-\d{2}-\d{2}$/.test(dateString)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (–∫—Ä–æ–º–µ —Å–µ–≥–æ–¥–Ω—è)
    const today = this.getMoscowDateString();
    const targetDate = new Date(dateString + 'T00:00:00+03:00');
    const todayDate = new Date(today + 'T00:00:00+03:00');

    if (targetDate < todayDate) {
      throw new Error('–ù–µ–ª—å–∑—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã');
    }

    const isUpdate = meta.maps[dateString] !== undefined;
    let mapNumber;

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    if (!meta.firstMapDate) {
      meta.firstMapDate = dateString;
      meta.totalMaps = 1;
      mapNumber = 1;
    } else {
      const firstDate = new Date(meta.firstMapDate + 'T00:00:00+03:00');
      if (targetDate < firstDate) {
        throw new Error('–î–∞—Ç–∞ –∫–∞—Ä—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –ø–µ—Ä–≤–æ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã');
      }
      
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É - –±–µ—Ä–µ–º –µ—ë –Ω–æ–º–µ—Ä
      if (isUpdate) {
        mapNumber = meta.maps[dateString].mapNumber;
      } else {
        // –ï—Å–ª–∏ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞ - –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä
        mapNumber = this.getMapNumber(dateString);
        if (!mapNumber) {
          // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å - —Å—Ç–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π
          mapNumber = meta.totalMaps + 1;
        }
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É
    const mapData = {
      date: dateString,
      mapNumber: mapNumber,
      map: map,
      authorUsername: authorUsername,
      publishedAt: new Date().toISOString(),
      averageJumps: null // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º–∏
    };

    meta.maps[dateString] = mapData;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º totalMaps –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!isUpdate) {
      meta.totalMaps++;
    }

    this.saveMeta(meta);

    console.log(`‚úÖ Map published for ${dateString} (Map #${mapNumber})`);

    return {
      mapNumber: mapNumber,
      date: dateString,
      isUpdate: isUpdate
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  getDailyMap() {
    const today = this.getMoscowDateString();
    return this.getMapByDate(today);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ –¥–∞—Ç–µ
  getMapByDate(dateString) {
    const meta = this.getMeta();
    
    const mapData = meta.maps[dateString];
    
    if (!mapData) {
      return null;
    }

    return {
      mapNumber: mapData.mapNumber,
      date: mapData.date,
      map: mapData.map,
      authorUsername: mapData.authorUsername,
      averageJumps: mapData.averageJumps
    };
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞—Ä—Ç—ã
  updateAverageJumps(dateString, averageJumps) {
    const meta = this.getMeta();
    
    if (meta.maps[dateString]) {
      meta.maps[dateString].averageJumps = averageJumps;
      this.saveMeta(meta);
    }
  }
}

module.exports = { DailyMapManager };