const Constants = require('../shared/constants');

class MapGenerator {
  constructor(seed) {
    this.width = Constants.MAP_WIDTH;
    this.height = Constants.MAP_HEIGHT;
    this.map = [];
    this.seed = seed || Date.now();
    this.rng = this.seededRandom(this.seed);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç—É
    for (let y = 0; y < this.height; y++) {
      this.map[y] = [];
      for (let x = 0; x < this.width; x++) {
        this.map[y][x] = Constants.TILE_TYPES.EMPTY;
      }
    }
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
    this.guaranteedPath = [];
  }

  seededRandom(seed) {
    let value = seed;
    return () => {
      value = (value * 9301 + 49297) % 233280;
      return value / 233280;
    };
  }

  random(min, max) {
    return Math.floor(this.rng() * (max - min + 1)) + min;
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ–∏–∑–∏–∫—É –∏–∑ player.js –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä—ã–∂–∫–∞
  calculateJump(jumpPower, jumpDirection) {
    // –ò–∑ player.js:
    const chargeRatio = (jumpPower - Constants.JUMP_MIN_POWER) / 
                        (Constants.JUMP_MAX_POWER - Constants.JUMP_MIN_POWER);
    
    let angle;
    
    if (jumpDirection === 0) {
      // –ü—Ä—è–º–æ –≤–≤–µ—Ä—Ö - 90 –≥—Ä–∞–¥—É—Å–æ–≤
      angle = Math.PI / 2;
    } else {
      // –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä—ã–∂–æ–∫ - —É–≥–æ–ª –æ—Ç 45¬∞ –¥–æ 72¬∞
      const minAngle = 45;
      const maxAngle = 72;
      const angleDegrees = minAngle + (maxAngle - minAngle) * chargeRatio;
      angle = (angleDegrees * Math.PI) / 180;
    }
    
    // –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–∏–∑ player.js)
    const velocityY = -jumpPower * Math.sin(angle);
    const horizontalComponent = jumpPower * Math.cos(angle);
    const velocityX = horizontalComponent * jumpDirection;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
    const gravity = Constants.GRAVITY;
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞: h = velocityY^2 / (2 * gravity)
    const maxHeight = (velocityY * velocityY) / (2 * gravity);
    
    // –í—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞: t = 2 * velocityY / gravity
    const timeInAir = (2 * Math.abs(velocityY)) / gravity;
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å: d = velocityX * time
    const horizontalDistance = Math.abs(velocityX) * timeInAir;
    
    return {
      height: maxHeight / Constants.TILE_SIZE,
      distance: horizontalDistance / Constants.TILE_SIZE,
      direction: jumpDirection
    };
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  generate() {
    console.log('üó∫Ô∏è  Map Generation Started');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä—ã–∂–∫–æ–≤
    console.log('üìä Jump Physics (from player.js):');
    
    const minJump = this.calculateJump(Constants.JUMP_MIN_POWER, 1);
    const midJump = this.calculateJump(24, 1);
    const maxJump = this.calculateJump(Constants.JUMP_MAX_POWER, 1);
    const maxJumpUp = this.calculateJump(Constants.JUMP_MAX_POWER, 0);
    
    console.log(`   Min (power=${Constants.JUMP_MIN_POWER}): ‚Üë${minJump.height.toFixed(1)} ‚Üí${minJump.distance.toFixed(1)} tiles`);
    console.log(`   Mid (power=24): ‚Üë${midJump.height.toFixed(1)} ‚Üí${midJump.distance.toFixed(1)} tiles`);
    console.log(`   Max (power=${Constants.JUMP_MAX_POWER}): ‚Üë${maxJump.height.toFixed(1)} ‚Üí${maxJump.distance.toFixed(1)} tiles`);
    console.log(`   Max UP (power=${Constants.JUMP_MAX_POWER}): ‚Üë${maxJumpUp.height.toFixed(1)} tiles\n`);
    
    // 1. –ì—Ä–∞–Ω–∏—Ü—ã
    this.createBorders();
    
    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
    this.generatePath();
    
    // 3. –†–∞–∑–º–µ—â–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    this.placePlatforms();
    
    // 4. –§–∏–Ω–∏—à
    this.createFinish();
    
    // 5. –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
    this.addObstacles();
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚úÖ Map Generation Complete\n');
    
    return this.map;
  }

  createBorders() {
    for (let y = 0; y < this.height; y++) {
      this.map[y][0] = Constants.TILE_TYPES.SOLID;
      this.map[y][this.width - 1] = Constants.TILE_TYPES.SOLID;
    }
    
    for (let x = 0; x < this.width; x++) {
      this.map[this.height - 1][x] = Constants.TILE_TYPES.SOLID;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–π —Ñ–∏–∑–∏–∫–∏
  generatePath() {
    console.log('üõ§Ô∏è  Generating Path:\n');
    
    // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
    const startY = this.height - 3;
    const startX = Math.floor(this.width / 2);
    
    this.guaranteedPath.push({
      x: startX,
      y: startY,
      width: 10,
      type: 'start'
    });
    
    let currentX = startX;
    let currentY = startY;
    let stepCount = 0;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
    while (currentY > 15) {
      stepCount++;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–∏–ª—É –ø—Ä—ã–∂–∫–∞ (15-32 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
      const jumpPower = this.random(15, 32);
      
      // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 0=–≤–≤–µ—Ä—Ö, -1=–≤–ª–µ–≤–æ, 1=–≤–ø—Ä–∞–≤–æ
      const rand = this.rng();
      let jumpDirection;
      if (rand < 0.35) {
        jumpDirection = -1; // –í–ª–µ–≤–æ
      } else if (rand < 0.70) {
        jumpDirection = 1; // –í–ø—Ä–∞–≤–æ
      } else {
        jumpDirection = 0; // –í–≤–µ—Ä—Ö
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –†–ï–ê–õ–¨–ù–´–ô –ø—Ä—ã–∂–æ–∫
      const jump = this.calculateJump(jumpPower, jumpDirection);
      
      // –°–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è
      const nextY = Math.floor(currentY - jump.height * 0.8); // 80% –æ—Ç –≤—ã—Å–æ—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const nextXOffset = Math.floor(jump.distance * 0.7 * jumpDirection); // 70% –æ—Ç –¥–∞–ª—å–Ω–æ—Å—Ç–∏
      let nextX = currentX + nextXOffset;
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
      nextX = Math.max(6, Math.min(nextX, this.width - 8));
      
      // –†–∞–∑–º–µ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      const platformWidth = this.random(5, 8);
      
      this.guaranteedPath.push({
        x: nextX,
        y: nextY,
        width: platformWidth,
        type: 'platform',
        jumpPower: jumpPower,
        jumpDirection: jumpDirection
      });
      
      const actualVertical = currentY - nextY;
      const actualHorizontal = Math.abs(nextX - currentX);
      
      console.log(`   ${stepCount}. (${currentX},${currentY}) ‚Üí (${nextX},${nextY})`);
      console.log(`      Power=${jumpPower}, Dir=${jumpDirection === 0 ? 'UP' : jumpDirection === -1 ? 'LEFT' : 'RIGHT'}`);
      console.log(`      Jump: ‚Üë${actualVertical} ‚Üí${actualHorizontal} tiles, Platform width: ${platformWidth}\n`);
      
      currentX = nextX;
      currentY = nextY;
      
      if (nextY < 15) break;
    }
    
    console.log(`   Total: ${stepCount} platforms\n`);
  }

  placePlatforms() {
    console.log('üèóÔ∏è  Placing Platforms:\n');
    
    for (let i = 0; i < this.guaranteedPath.length; i++) {
      const point = this.guaranteedPath[i];
      const startX = point.x - Math.floor(point.width / 2);
      const endX = startX + point.width - 1;
      
      for (let x = startX; x <= endX; x++) {
        if (x >= 1 && x < this.width - 1) {
          this.map[point.y][x] = Constants.TILE_TYPES.SOLID;
        }
      }
      
      console.log(`   ${point.type} at Y=${point.y}, X=${startX}-${endX}`);
    }
    
    console.log('');
  }

  createFinish() {
    const finishY = 5;
    const finishX = Math.floor(this.width / 2) - 3;
    
    // –§–∏–Ω–∏—à–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
    for (let x = finishX; x <= finishX + 6; x++) {
      if (x >= 1 && x < this.width - 1) {
        this.map[finishY][x] = Constants.TILE_TYPES.FINISH;
      }
    }
    
    // –°—Ç–µ–Ω—ã
    for (let y = finishY - 2; y <= finishY + 1; y++) {
      if (y >= 0 && y < this.height) {
        this.map[y][finishX - 1] = Constants.TILE_TYPES.SOLID;
        this.map[y][finishX + 7] = Constants.TILE_TYPES.SOLID;
      }
    }
    
    console.log('üèÅ Finish placed at Y=5\n');
  }

  addObstacles() {
    console.log('üßä Adding Obstacles:\n');
    
    let iceCount = 0;
    let snowCount = 0;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –±–ª–æ–∫–∞–º
    for (let y = this.height - 10; y > 10; y--) {
      for (let x = 2; x < this.width - 2; x++) {
        if (this.map[y][x] === Constants.TILE_TYPES.SOLID && 
            this.map[y - 1][x] === Constants.TILE_TYPES.EMPTY) {
          
          // –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
          if (y === this.height - 3) continue;
          
          const zoneHeight = this.height - y;
          const probability = Math.min(0.10, 0.03 + (zoneHeight / 800));
          
          if (this.rng() < probability) {
            const type = this.rng();
            
            if (type < 0.5) {
              // –õ–µ–¥ (—Ä–æ–≤–Ω–æ 3 –±–ª–æ–∫–∞)
              if (this.placeObstacle(x, y, 3, Constants.TILE_TYPES.ICE)) {
                iceCount++;
                x += 2; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
              }
            } else {
              // –°–Ω–µ–≥ (—Ä–æ–≤–Ω–æ 3 –±–ª–æ–∫–∞)
              if (this.placeObstacle(x, y, 3, Constants.TILE_TYPES.SNOW)) {
                snowCount++;
                x += 2;
              }
            }
          }
        }
      }
    }
    
    console.log(`   Ice patches: ${iceCount}`);
    console.log(`   Snow patches: ${snowCount}\n`);
  }

  placeObstacle(startX, y, length, type) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
    for (let i = 0; i < length; i++) {
      const x = startX + i;
      if (x >= this.width - 1 || this.map[y][x] !== Constants.TILE_TYPES.SOLID) {
        return false;
      }
    }
    
    // –†–∞–∑–º–µ—â–∞–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
    for (let i = 0; i < length; i++) {
      this.map[y][startX + i] = type;
    }
    
    return true;
  }
}

function generateMap(seed) {
  const generator = new MapGenerator(seed);
  const map = generator.generate();
  
  console.log(`Seed: ${generator.seed}`);
  console.log(`Path length: ${generator.guaranteedPath.length} platforms`);
  
  return map;
}

module.exports = { generateMap, MapGenerator };