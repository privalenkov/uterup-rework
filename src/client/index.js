import { connect, play } from './networking';
import { startRendering, stopRendering } from './render';
import { startCapturingInput, stopCapturingInput } from './input';
import { initState, setMap } from './state';
import { setLeaderboardHidden } from './leaderboard';
import './css/main.css';

const playMenu = document.getElementById('play-menu');
const playButton = document.getElementById('play-button');
const usernameInput = document.getElementById('username-input');
const lobbyInfo = document.getElementById('lobby-info');
const mapInfo = document.getElementById('map-info');
const errorMessage = document.getElementById('error-message');

// –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏
if (!lobbyInfo) {
  const lobbyInfoDiv = document.createElement('div');
  lobbyInfoDiv.id = 'lobby-info';
  lobbyInfoDiv.className = 'lobby-info hidden';
  document.body.appendChild(lobbyInfoDiv);
}

let dailyMapData = null;

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –¥–Ω—è
async function loadDailyMap() {
  try {
    const response = await fetch('/api/daily');
    
    if (!response.ok) {
      if (response.status === 404) {
        throw new Error('–ö–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞');
      }
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
    }

    dailyMapData = await response.json();
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
    if (mapInfo) {
      mapInfo.innerHTML = `
        <div class="map-number">–ö–∞—Ä—Ç–∞ #${dailyMapData.mapNumber}</div>
        <div class="map-author">–ê–≤—Ç–æ—Ä: ${dailyMapData.authorUsername}</div>
        ${dailyMapData.averageJumps ? `<div class="map-average">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${dailyMapData.averageJumps} –ø—Ä—ã–∂–∫–æ–≤</div>` : ''}
      `;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    playButton.textContent = `–ò–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É #${dailyMapData.mapNumber}`;
    playButton.disabled = false;

    if (errorMessage) {
      errorMessage.classList.add('hidden');
    }

    return true;
  } catch (error) {
    console.error('Error loading daily map:', error);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É
    if (errorMessage) {
      errorMessage.textContent = error.message;
      errorMessage.classList.remove('hidden');
    }

    playButton.textContent = '–û—à–∏–±–∫–∞';
    playButton.disabled = true;

    return false;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
Promise.all([
  connect(),
  loadDailyMap()
]).then(([_, mapLoaded]) => {
  playMenu.classList.remove('hidden');
  
  if (mapLoaded) {
    usernameInput.focus();
  }
  
  playButton.onclick = () => {
    if (!dailyMapData) {
      alert('–ö–∞—Ä—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
      return;
    }

    const username = usernameInput.value.trim() || 'Anonymous';
    
    playButton.disabled = true;
    playButton.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    
    // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º state
    initState();
    
    // –ü–æ—Ç–æ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É
    setMap(dailyMapData.map);
    
    console.log('Map set, starting game...');
    console.log('Map size:', dailyMapData.map.length, 'x', dailyMapData.map[0].length);
    
    play(username);
    playMenu.classList.add('hidden');
    startCapturingInput();
    startRendering();
    setLeaderboardHidden(false);
  };

  usernameInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !playButton.disabled) {
      playButton.click();
    }
  });
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–±–±–∏
export function showLobbyInfo(lobbyData) {
  const lobbyInfoDiv = document.getElementById('lobby-info');
  if (lobbyInfoDiv) {
    lobbyInfoDiv.innerHTML = `
      <div class="lobby-badge">
        üè† Lobby: ${lobbyData.lobbyId}<br>
        üë• Players: ${lobbyData.players}/${lobbyData.maxPlayers}
      </div>
    `;
    lobbyInfoDiv.classList.remove('hidden');
  }
}

export function updateLobbyInfo(lobbyData) {
  const lobbyInfoDiv = document.getElementById('lobby-info');
  if (lobbyInfoDiv && !lobbyInfoDiv.classList.contains('hidden')) {
    lobbyInfoDiv.innerHTML = `
      <div class="lobby-badge">
        üè† Lobby: ${lobbyData.id}<br>
        üë• Players: ${lobbyData.players}/${lobbyData.maxPlayers}
      </div>
    `;
  }
}